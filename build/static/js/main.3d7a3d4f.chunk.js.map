{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Screen","props","react_default","a","createElement","className","dispValue","Button","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onButtonPress","bind","assertThisInitialized","value","onClick","React","Component","Calculator","_this2","clrBtn","delBack","calcRes","state","scrStr","btnVal","setState","prevState","substring","length","String","evaluate","_this3","App_Screen","App_Button","map","num","Boolean","window","location","hostname","match","ReactDOM","render","App_Calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d7a3d4f.chunk.js","sourcesContent":["import React from 'react';\nimport {evaluate} from 'mathjs';\nimport './App.css'\n\nconst Screen = (props) =>{\n  return(\n      <div className=\"screen\">\n          <p>{props.dispValue}</p>\n      </div>\n  );\n}\n\nclass Button extends React.Component{\n  constructor(props){\n      super(props);\n      this.onButtonPress = this.onButtonPress.bind(this);\n  }\n\n  onButtonPress(){\n      this.props.onButtonPress(this.props.value);\n  }\n\n  render(){\n      return(\n          <button onClick={this.onButtonPress}>{this.props.value}</button>\n      );\n  }\n}\n\n\nexport default class Calculator extends React.Component{\n  constructor(props){\n      super(props);\n      this.onButtonPress = this.onButtonPress.bind(this);\n      this.clrBtn = this.clrBtn.bind(this);\n      this.delBack = this.delBack.bind(this);\n      this.calcRes = this.calcRes.bind(this);\n      this.state = {\n          scrStr : ''\n      };\n  }\n\n  onButtonPress(btnVal){\n      this.setState((prevState)=>{\n          return{\n              scrStr : prevState.scrStr + btnVal\n          };\n      });\n  }\n\n  clrBtn(){\n      this.setState(()=>{\n          return{\n              scrStr : ''\n          };\n      });\n  }\n\n  delBack(){\n      this.setState((prevState) =>{\n          return{\n              scrStr : prevState.scrStr.substring(0,prevState.scrStr.length-1)\n          };\n      });\n  }\n\n  calcRes(){\n      this.setState((prevState) =>{\n          if(prevState.scrStr){\n              return{\n                  scrStr : String(evaluate(prevState.scrStr))\n              };\n          }\n      });\n  }\n\n  render(){\n      return(\n          <div className=\"container\">\n              <Screen dispValue={this.state.scrStr}/>\n              <button onClick={this.clrBtn}>C</button>\n              <Button value={'%'} onButtonPress={this.onButtonPress}/>\n              <button onClick = {this.calcRes}>=</button>\n              <button onClick = {this.delBack}><i className=\"fas fa-backspace\"></i></button>\n              {[7,8,9].map((num)=>(<Button value={num} onButtonPress={this.onButtonPress}/>))}\n              <Button value={'+'} onButtonPress={this.onButtonPress}/>\n              {[4,5,6].map((num)=>(<Button value={num} onButtonPress={this.onButtonPress}/>))}\n              <Button value={'-'} onButtonPress={this.onButtonPress}/>\n              {[1,2,3].map((num)=>(<Button value={num} onButtonPress={this.onButtonPress}/>))}\n              <Button value={'*'} onButtonPress={this.onButtonPress}/>\n              <Button value={0} onButtonPress={this.onButtonPress}/>\n              <Button value={'.'} onButtonPress={this.onButtonPress}/>\n              <Button value={'/'} onButtonPress={this.onButtonPress}/>\n          </div>\n      )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}